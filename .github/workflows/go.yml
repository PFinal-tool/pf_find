name: Go Build and Release

on:
  push:
    branches:
      - main  # 在 main 分支有提交时触发
    tags:
      - '*'  # 以及在推送标签时触发
  pull_request:
    branches:
      - main  # 当有 pull request 到 main 分支时触发

jobs:
  build:
    name: Build and release Go binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]  # 需要打包的操作系统
        goarch: [amd64]  # 目标架构
        include:
          - goos: windows
            goarch: amd64
            ext: .exe
          - goos: linux
            goarch: amd64
            ext: ""
          - goos: darwin
            goarch: amd64
            ext: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.2'  # 设置你需要的 Go 版本

      - name: Get Project Name
        id: project_name
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#*/}
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Get Tag
        id: get_tag
        run: |
          TAG=$(git tag | tail -n 1)  # 获取最新的标签
          if [ -z "$TAG" ]; then
            echo "No tags found."
            echo "TAG=none" >> $GITHUB_ENV  # 设置一个默认值
          else
            echo "TAG=$TAG" >> $GITHUB_ENV
          fi

      - name: Build binaries
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.REPO_NAME }}-${{ env.TAG }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} .

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPO_NAME }}-${{ env.TAG }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          path: ${{ env.REPO_NAME }}-${{ env.TAG }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}

      - name: Check if Release exists
        id: check_release
        run: |
          echo "Checking if release exists for tag: ${{ env.TAG }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG }}")
          echo "Release check response code: $response"
          echo "RELEASE_STATUS=$response" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        if: env.RELEASE_STATUS == '404' && env.TAG != 'none'  # 仅在没有找到现有 Release 时创建
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub 自动生成的 token
        with:
          tag_name: ${{ env.TAG }}  # 使用 Git 标签作为版本号
          release_name: "${{ env.REPO_NAME }} Release ${{ env.TAG }}"
          body: "Automatic release of Go binaries for Windows, Linux, and macOS."
          draft: false
          prerelease: false

      - name: Upload binaries to release
        uses: actions/upload-release-asset@v1
        if: env.RELEASE_STATUS == '404' && env.TAG != 'none'  # 仅在没有找到现有 Release 时上传
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.REPO_NAME }}-${{ env.TAG }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          asset_name: ${{ env.REPO_NAME }}-${{ env.TAG }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          asset_content_type: application/octet-stream
